// *** IMPORTANT: REPLACE WITH YOUR ACTUAL FIREBASE PROJECT CONFIG ***
const firebaseConfig = {
Â  Â  apiKey: "AIzaSyAF8Vq1SX1vnb3nJfszWDYYZQ1MbJVwMXQ",
Â  Â  authDomain: "nimbus-27588.firebaseapp.com",
Â  Â  projectId: "nimbus-27588",
Â  Â  storageBucket: "nimbus-27588.firebasestorage.app",
Â  Â  messagingSenderId: "582331828095",
Â  Â  appId: "1:582331828095:web:62b276f03f25e9ba937c4a",
Â  Â  measurementId: "G-73M7E8ZF4N"
};

// Initialize Firebase
const app = firebase.initializeApp(firebaseConfig);
const auth = app.auth();
const db = firebase.firestore();
let currentRole = "";
let currentMode = "login"; // Default mode

// ======================================================================
// NEW: Direct Passenger Access Function
// ======================================================================
function goToPassengerPortal() {
Â  Â  // Passenger bypasses authentication entirely and is redirected immediately
Â  Â  window.location.href = 'passenger.html';
}
// ======================================================================

function setMode(mode) {
Â  Â  currentMode = mode;
Â  Â  document.getElementById("loginModeBtn").classList.remove("active");
Â  Â  document.getElementById("signupModeBtn").classList.remove("active");

Â  Â  const submitButton = document.getElementById("submitButton");
Â  Â  const formTitle = document.getElementById("formTitle");

Â  Â  if (mode === 'login') {
Â  Â  Â  Â  document.getElementById("loginModeBtn").classList.add("active");
Â  Â  Â  Â  submitButton.innerText = "Login";
Â  Â  Â  Â  formTitle.innerText = `${currentRole} Login`;
Â  Â  } else {
Â  Â  Â  Â  document.getElementById("signupModeBtn").classList.add("active");
Â  Â  Â  Â  submitButton.innerText = "Signup";
Â  Â  Â  Â  formTitle.innerText = `${currentRole} Signup`;
Â  Â  }
Â  Â  document.getElementById("errorMsg").innerText = ""; // Clear errors on mode switch
}

function openForm(role) {
Â  Â  // This is now only called for Driver and Authority
Â  Â  currentRole = role;
Â  Â  document.getElementById("popupForm").style.display = "flex";
Â  Â  setMode('login');
}

function closeForm() {
Â  Â  document.getElementById("popupForm").style.display = "none";
Â  Â  document.getElementById("errorMsg").innerText = "";
Â  Â  document.getElementById("userForm").reset();
}

function displayError(message) {
Â  Â  const errorMsg = document.getElementById("errorMsg");
Â  Â  errorMsg.innerText = `âš  ${message}`;
}


// ----------------------------------------------------------------------
// 3. FIREBASE AUTHENTICATION HANDLER (FOR DRIVER/AUTHORITY ONLY)
// ----------------------------------------------------------------------

function handleAuth(event) {
Â  Â  event.preventDefault();

Â  Â  const email = document.getElementById("email").value.trim();
Â  Â  const passwordInput = document.getElementById("password"); 
Â  Â  const password = passwordInput.value.trim();
Â  Â  const username = document.getElementById("username").value.trim(); // Get username early
Â  Â  const submitButton = document.getElementById("submitButton");

Â  Â  document.getElementById("errorMsg").innerText = "";

Â  Â  if (email === "" || password === "" || password.length < 6) {
Â  Â  Â  Â  displayError("Please enter a valid email and a password (min 6 characters).");
Â  Â  Â  Â  return false;
Â  Â  }
Â  Â  
Â  Â  submitButton.disabled = true;
Â  Â  submitButton.innerText = currentMode === 'login' ? 'Logging in...' : 'Signing up...';

Â  Â  const authPromise = currentMode === 'signup'
Â  Â  Â  Â  ? auth.createUserWithEmailAndPassword(email, password)
Â  Â  Â  Â  : auth.signInWithEmailAndPassword(email, password);

Â  Â  authPromise
Â  Â  Â  Â  .then((userCredential) => {
Â  Â  Â  Â  Â  Â  const user = userCredential.user;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if (currentMode === 'signup') {
Â  Â  Â  Â  Â  Â  Â  Â  
                // 1. Set the role and username in Firestore upon successful SIGNUP
Â  Â  Â  Â  Â  Â  Â  Â  return db.collection("users").doc(user.uid).set({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  email: user.email,
                    // *** ðŸ”¥ FIX APPLIED HERE: Save the username field to Firestore ***
                    username: username || user.email, // Use provided username or fallback to email
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  role: currentRole,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  createdAt: firebase.firestore.FieldValue.serverTimestamp()
Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  Â  Â  .then(() => {
                    // 2. Also set the displayName in Firebase Auth (optional, but good practice)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (username) return user.updateProfile({ displayName: username });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return user;
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return user; // Return user for the login scenario
Â  Â  Â  Â  })
Â  Â  Â  Â  .then(async (user) => {
Â  Â  Â  Â  Â  Â  // CHECK ROLE during LOGIN
Â  Â  Â  Â  Â  Â  if (currentMode === 'login') {
Â  Â  Â  Â  Â  Â  Â  Â  const userDoc = await db.collection("users").doc(user.uid).get();

Â  Â  Â  Â  Â  Â  Â  Â  if (!userDoc.exists) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new Error("User data not found. Please contact support.");
Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  const storedRole = userDoc.data().role;
                // Since your Authority Portal looks for the 'drivers' collection, 
                // we'll assume the driver details are mirrored there (best practice).
                // For now, we only need to check the 'users' collection for the role.
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // CRITICAL CHECK: Does the stored role match the portal being accessed?
Â  Â  Â  Â  Â  Â  Â  Â  if (storedRole !== currentRole) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await auth.signOut(); 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new Error(`Access Denied! You are registered as a ${storedRole}, not a ${currentRole}.`);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  alert(`${currentRole} ${currentMode} successful! Welcome!`);

Â  Â  Â  Â  Â  Â  closeForm();
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Redirect based on role (Driver/Authority)
Â  Â  Â  Â  Â  Â  if (currentRole === 'Driver') {
Â  Â  Â  Â  Â  Â  Â  Â  window.location.href = 'driver.html'; 
Â  Â  Â  Â  Â  Â  } else if (currentRole === 'Authority') {
Â  Â  Â  Â  Â  Â  Â  Â  window.location.href = 'authority.html';
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  })
Â  Â  Â  Â  .catch((error) => {
Â  Â  Â  Â  Â  Â  let errorMessage = error.message;

Â  Â  Â  Â  Â  Â  if (error.code) {
Â  Â  Â  Â  Â  Â  Â  Â  // Auto-switch: If user tries to SIGNUP with an existing email
Â  Â  Â  Â  Â  Â  Â  Â  if (error.code === 'auth/email-already-in-use' && currentMode === 'signup') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  errorMessage = "This account already exists. Please LOG IN with your password.";
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setMode('login'); 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  passwordInput.value = ''; // CRITICAL CLEANUP
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  // Handle common login failure codes
Â  Â  Â  Â  Â  Â  Â  Â  else if (error.code === 'auth/invalid-login-credentials' || 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â error.code === 'auth/wrong-password' || 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â error.code === 'auth/user-not-found') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  errorMessage = "Login failed. Please check your password and email, or use the Signup tab if you are a new user.";
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  passwordInput.value = ''; 
Â  Â  Â  Â  Â  Â  Â  Â  } 
Â  Â  Â  Â  Â  Â  Â  Â  else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Clean up default Firebase error messages
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  errorMessage = error.message.replace("Firebase: ", "");
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  } 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  submitButton.disabled = false;
Â  Â  Â  Â  Â  Â  submitButton.innerText = currentMode === 'login' ? 'Login' : 'Signup';

Â  Â  Â  Â  Â  Â  if (errorMessage.includes("Access Denied")) {
Â  Â  Â  Â  Â  Â  Â  Â  setMode('login'); 
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  console.error("Auth Error:", error.code || 'Custom', errorMessage);
Â  Â  Â  Â  Â  Â  displayError(errorMessage);
Â  Â  Â  Â  });

Â  Â  return false;
}
